{"version":3,"sources":["index.js","src/wx/index.js","src/wx/page.js","src/wx/router.js","src/lib/index.js","src/notificationCenter/index.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,ACHA,ACHA,ACHA;AHUA,AIZA,AFMA,ACHA;AHUA,AIZA,AFMA,ACHA;AHUA,AIZA,AFMA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,ACHA,AHSA,ACHA;AHUA,AIZA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,AFMA,ACHA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA,ADGA;ACFA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["var __TEMP__ = require('./src/wx/index');var KGWX = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('./src/notificationCenter/index');var KGNotificationCenter = __REQUIRE_DEFAULT__(__TEMP__);\nlet _wx = null;\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.getKGWechat = function getKGWechat() {\n    if (!_wx) {\n        _wx = {};\n        _wx.page = KGWX.page;\n        _wx.router = KGWX.router.shareInstace();\n        _wx.notificationCenter = KGNotificationCenter;\n    }\n    return _wx;\n};\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.getKGVue = function getKGVue() {\n    if (!_wx) {\n        _wx = {};\n        _wx.page = KGWX.page;\n        _wx.router = KGWX.router.shareInstace();\n        _wx.notificationCenter = KGNotificationCenter;\n    }\n    return _wx;\n};\n","// Richie Guo 2020-09-16\n\nvar __TEMP__ = require('./page');var KGPage = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('./router');var KGRouter = __REQUIRE_DEFAULT__(__TEMP__);\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\n    page: KGPage,\n    router: KGRouter,\n};\n","// Richie Guo 2020-09-16\n\nvar __TEMP__ = require('./router');var WX_KGRouter = __REQUIRE_DEFAULT__(__TEMP__);\nconst KGRouter = WX_KGRouter.shareInstace();\n\nconst KGPage = function(JSON) {\n    const _onLoad = JSON.onLoad;\n    JSON.onLoad = function(options) {\n        if (!options[KGRouter.optionsKey] || options[KGRouter.optionsKey] === KGRouter.optionsNull) {\n            this[KGRouter.optionsKey] = KGRouter.getUniqueCode();\n        } else {\n            this[KGRouter.optionsKey] = options[KGRouter.optionsKey];\n            delete options[KGRouter.optionsKey];\n            if (options[KGRouter.optionsTypeKey]) {\n                this[KGRouter.optionsTypeKey] = options[KGRouter.optionsTypeKey] || '';\n                delete options[KGRouter.optionsTypeKey];\n            }\n        }\n        if (this.onKGData) {\n            const _kg_data = KGRouter.getDataFromPool(this[KGRouter.optionsKey]);\n            if (_kg_data) {\n                const _tag = _kg_data[KGRouter.dataTag] || this[KGRouter.optionsTypeKey]\n                delete _kg_data[KGRouter.dataTag];\n                this.onKGData(_kg_data, _tag);\n            }\n            if (this[KGRouter.optionsTypeKey]) {\n                delete this[KGRouter.optionsTypeKey];\n            }\n        }\n        _onLoad && _onLoad.call(this, options);\n    }\n    return JSON;\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = KGPage;\n","// Richie Guo 2020-09-16\n// 编码参数格式 {a:1,b:2,c:3} => ?a=1&b=2&c=3 用于url传参\n\nvar __TEMP__ = require('../lib/index');var LIB = __REQUIRE_DEFAULT__(__TEMP__);\nconst {\n    KillGlobal_EncodeParams,\n    KG_GetUniqueCode,\n    KG_TYPE_BACK, // 返回\n    KG_TYPE_NAVIGATETO, // push\n    KG_TYPE_RELAUNCH, // 重启\n    KG_TYPE_REDIRECT, // 重定向\n    KG_DATA_TAG, // options中的标示，用来获取key\n    KG_OPTIONS_KEY, // options中的标示，用来获取key\n    KG_OPTIONS_TYPE_KEY, // options中的标示，用来获取key\n    KG_NUL_VALUE, //options表示空的标示\n    KG_DataPool, // 数据池\n    KG_TranslateData,\n    KG_InsertKeyToParams,\n    KG_DefineReadOnlyProperty,\n} = LIB;\nlet _share_wx_router = null;\n\nfunction _WX_KGRouter() {\n    const _property = {\n        navigateTo(url, params) { // 进入下一个页面  url：地址, params：参数\n            const _params = KG_InsertKeyToParams(params, KG_TYPE_NAVIGATETO);\n            wx.navigateTo({ url: `${url}${KillGlobal_EncodeParams(_params, url)}` });\n            return new KG_TranslateData(_params[KG_OPTIONS_KEY]);\n        },\n        redirectTo(url, params) { // 重定向  url：地址, params：参数\n            const _params = KG_InsertKeyToParams(params, KG_TYPE_REDIRECT);\n            wx.redirectTo({ url: `${url}${KillGlobal_EncodeParams(_params, url)}` });\n            return new KG_TranslateData(_params[KG_OPTIONS_KEY]);\n        },\n        reLaunch(url, params) { // 重启到某个页面 url：地址, params：参数\n            const _params = KG_InsertKeyToParams(params, KG_TYPE_RELAUNCH);\n            wx.reLaunch({ url: `${url}${KillGlobal_EncodeParams(_params, url)}` });\n            return new KG_TranslateData(_params[KG_OPTIONS_KEY]);\n        },\n        navigateBack(delta = 1) { // 返回某个页面\n            const _pages = getCurrentPages();\n            let _ind = _pages.length - delta - 1;\n            _ind = _ind > -1 ? _ind : 0;\n            _ind = _ind > _pages.length - 1 ? _pages.length - 1 : _ind;\n            const _page = _pages[_ind]; // 目地页面\n            const _key = _page[KG_OPTIONS_KEY]; // 目地页面的key\n            wx.navigateBack({ delta });\n            return new KG_TranslateData(_key, _page, KG_TYPE_BACK);\n        },\n        getDataFromPool(key) { // 获取数据\n            if (!key || key === KG_NUL_VALUE) return '';\n            const _data = KG_DataPool[key];\n            delete KG_DataPool[key]; // 从数据池删除数据\n            return _data;\n        },\n        get optionsKey() {\n            return KG_OPTIONS_KEY;\n        },\n        get optionsTypeKey() {\n            return KG_OPTIONS_TYPE_KEY;\n        },\n        get optionsNull() {\n            return KG_NUL_VALUE;\n        },\n        get dataTag() {\n            return KG_DATA_TAG;\n        },\n        get getUniqueCode() {\n            return KG_GetUniqueCode;\n        },\n        get encodeUrlParams() { // 将参数编码为字符串\n            return KillGlobal_EncodeParams\n        },\n        get push() { // navigateTo别名1\n            return this.navigateTo;\n        },\n        get goto() { // navigateTo别名2\n            return this.navigateTo;\n        },\n        get redirect() { // 重定向 别名\n            return this.redirectTo;\n        },\n        get back() { // 返回 别名\n            return this.navigateBack;\n        },\n    };\n    this.init = function() {\n        KG_DefineReadOnlyProperty(this, _property);\n        return this;\n    }\n}\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\n    shareInstace() {\n        if (!_share_wx_router) {\n            _share_wx_router = (new _WX_KGRouter()).init();\n        }\n        return _share_wx_router;\n    }\n};\n","const KG_TYPE_BACK = \"KG_NAVIGATEBACK\"; // 返回\nconst KG_TYPE_NAVIGATETO = \"KG_NAVIGATETO\"; // push\nconst KG_TYPE_RELAUNCH = \"KG_RELAUNCH\"; // 重启\nconst KG_TYPE_REDIRECT = \"KG_REDIRECTTO\"; // 重定向\nconst KG_DATA_TAG = '_kill_global_data_tag_'; // options中的标示，用来获取key\nconst KG_OPTIONS_KEY = '_kill_global_data_pool_key_'; // options中的标示，用来获取key\nconst KG_OPTIONS_TYPE_KEY = '_kill_global_type_'; // options中的标示，用来获取key\nconst KG_NUL_VALUE = '_kill_global_data_pool_key_null'; //options表示空的标示\nconst KG_DataPool = {}; // 数据池\n\nfunction KillGlobal_EncodeParams(params, url) { // *url可选，非必传\n    let _params = '';\n    if (params && typeof params == 'object') {\n        let keys = Object.keys(params);\n        for (let i = 0; i < keys.length; i++) {\n            let _key = keys[i];\n            if (i == 0) {\n                if (url && url.indexOf('?') > -1) {\n                    _params += `&${_key}=${params[_key]}`;\n                } else {\n                    _params += `?${_key}=${params[_key]}`;\n                }\n            } else {\n                _params += `&${_key}=${params[_key]}`;\n            }\n        }\n    }\n    return _params;\n}\n\nfunction KillGlobal_DeepCopy(data) { // *对象深拷贝\n    if (!data) return '';\n    if (typeof data != 'object') return data;\n    if (Object.keys(data).length == 0) return data;\n    let _data = {};\n    if (Array.isArray(data)) { // 如果是数组\n        _data = [];\n        if (data.length > 0) {\n            for (let key = 0; key < data.length; key++) {\n                let val = data[key];\n                if (typeof val == 'object') {\n                    _data[key] = DeepCopy(val);\n                    continue;\n                }\n                _data[key] = val;\n            }\n        }\n    } else { // 如果是字典\n        for (let key in data) {\n            let val = data[key];\n            if (typeof val == 'object') {\n                _data[key] = DeepCopy(val);\n                continue;\n            }\n            _data[key] = val;\n        }\n    }\n    return _data;\n}\n\nfunction KG_GetUniqueCode() { // 获取唯的编码\n    return `_data_pool_key_${parseInt(Math.random()*1000000)}`;\n}\n\nfunction KG_SetDataPool(data, key) { // 将数据放入数据池\n    if (!data) return KG_NUL_VALUE;\n    let _key = key || KG_GetUniqueCode();\n    KG_DataPool[_key] = data;\n    const _options = {};\n    _options[KG_OPTIONS_KEY] = _key;\n    return _options;\n}\n\nfunction KG_TranslateData(options_key, page = '', type) { // 传输数据的对象\n    this.type = type;\n    this.targetPage = page;\n    this.translateCode = options_key || KG_NUL_VALUE;\n    // *@param data: 数据\n    // *@param tag: 标识 可选,一个page的onKGData可能会被很多page调用，这个tag用来标示数据来源\n    this.withKGData = function(data, tag = '') { // 存储数据/传数据\n        const _data = KillGlobal_DeepCopy(data) // 拷贝data，防止互相干扰\n        if (this.targetPage && this.targetPage.onKGData) {\n            // 如果知道page，直接将数据传过去\n            this.targetPage.onKGData(_data, tag || this.type);\n            return;\n        }\n        _data[KG_DATA_TAG] = tag;\n        KG_SetDataPool(_data, this.translateCode);\n    }\n}\n\nconst KG_InsertKeyToParams = function(params, type) { // 向params中插入参数\n    let _params = {};\n    if (params && Object.keys(params).length > 0) {\n        _params = Object.assign(_params, params);\n    }\n    _params[KG_OPTIONS_KEY] = KG_GetUniqueCode();\n    _params[KG_OPTIONS_TYPE_KEY] = type;\n    return _params;\n}\n\n\n// 将property的所有字段赋给obj，并设置为只读\nfunction KG_DefineReadOnlyProperty(obj, prototype) {\n    if (!prototype || typeof prototype != 'object') return obj;\n    for (let key in prototype) {\n        try {\n            // total_buy_price_formate\n            // 允许覆盖属性\n            if (Object.prototype.hasOwnProperty.call(obj, key)) {\n                delete obj[key];\n            }\n            Object.defineProperty(obj, key, {\n                get() { return prototype[key]; }, // 设置属性只读\n                enumerable: true, // 允许遍历\n                configurable: true, // 允许删除\n            });\n        } catch (err) {\n            console.error(err);\n            console.trace();\n        }\n    }\n    return obj;\n}\n\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\n    KG_DefineReadOnlyProperty,\n    KillGlobal_EncodeParams,\n    KillGlobal_DeepCopy,\n    KG_GetUniqueCode,\n    KG_TYPE_BACK, // 返回\n    KG_TYPE_NAVIGATETO, // push\n    KG_TYPE_RELAUNCH, // 重启\n    KG_TYPE_REDIRECT, // 重定向\n    KG_DATA_TAG, // options中的标示，用来获取key\n    KG_OPTIONS_KEY, // options中的标示，用来获取key\n    KG_OPTIONS_TYPE_KEY, // options中的标示，用来获取key\n    KG_NUL_VALUE, //options表示空的标示\n    KG_DataPool, // 数据池\n    KG_SetDataPool,\n    KG_TranslateData,\n    KG_InsertKeyToParams,\n};\n","// Richie Guo 2020-09-16\n// 通知\nconst NotificationCenter = function() {\n\n}\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = NotificationCenter;\n"]}