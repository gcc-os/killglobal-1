{"version":3,"sources":["index.js","src/wx/index.js","src/wx/page.js","src/wx/router.js"],"names":[],"mappings":";;;;;;;AAAA;AACA;AACA;AACA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;AFOA,ACHA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;ADIA,ACHA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA","file":"index.js","sourcesContent":["const _wx = require(\"./src/wx/index\").default;\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\n    get wx() { // 获取微信实例\n        return _wx;\n    },\n};\n","// Richie Guo 2020-09-16\n\nvar __TEMP__ = require('./page');var KGPage = __REQUIRE_DEFAULT__(__TEMP__);\nvar __TEMP__ = require('./router');var KGRouter = __REQUIRE_DEFAULT__(__TEMP__);\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = {\n    page: KGPage,\n    router: KGRouter,\n};\n","// Richie Guo 2020-09-16\n\nvar __TEMP__ = require('./router');var KGRouter = __REQUIRE_DEFAULT__(__TEMP__);\n\nconst KGPage = function(JSON) {\n    const _onLoad = JSON.onLoad;\n    JSON.onLoad = function(options) {\n        if (!options[KGRouter.optionsKey] || options[KGRouter.optionsKey] === KGRouter.optionsNull) {\n            this[KGRouter.optionsKey] = KGRouter.getUniqueCode();\n        } else {\n            this[KGRouter.optionsKey] = options[KGRouter.optionsKey];\n            delete options[KGRouter.optionsKey];\n            if (options[KGRouter.optionsTypeKey]) {\n                this[KGRouter.optionsTypeKey] = options[KGRouter.optionsTypeKey] || '';\n                delete options[KGRouter.optionsTypeKey];\n            }\n        }\n        if (this.onKGData) {\n            const _kg_data = KGRouter.getDataFromPool(this[KGRouter.optionsKey]);\n            if (_kg_data) {\n                this.onKGData(_kg_data, _kg_data[KGRouter.dataTag] || this[KGRouter.optionsTypeKey]);\n            }\n            if (this[KGRouter.optionsTypeKey]) {\n                delete this[KGRouter.optionsTypeKey];\n            }\n        }\n        _onLoad && _onLoad.call(this, options);\n    }\n    return JSON;\n}\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = KGPage;\n","// Richie Guo 2020-09-16\n// 编码参数格式 {a:1,b:2,c:3} => ?a=1&b=2&c=3 用于url传参\n\n// return \"?a=1&b=2&c=3\"\nfunction EncodeParams(params, url) { // *url可选，非必传\n    let _params = '';\n    if (params && typeof params == 'object') {\n        let keys = Object.keys(params);\n        for (let i = 0; i < keys.length; i++) {\n            let _key = keys[i];\n            if (i == 0) {\n                if (url && url.indexOf('?') > -1) {\n                    _params += `&${_key}=${params[_key]}`;\n                } else {\n                    _params += `?${_key}=${params[_key]}`;\n                }\n            } else {\n                _params += `&${_key}=${params[_key]}`;\n            }\n        }\n    }\n    return _params;\n}\nconst TYPE_BACK = \"NAVIGATEBACK\"; // 返回\nconst TYPE_NAVIGATETO = \"NAVIGATETO\"; // push\nconst TYPE_RELAUNCH = \"RELAUNCH\"; // 重启\nconst TYPE_REDIRECT = \"REDIRECTTO\"; // 重定向\nconst DATA_TAG = '_kill_global_data_tag_'; // options中的标示，用来获取key\nconst OPTIONS_KEY = '_kill_global_data_pool_key_'; // options中的标示，用来获取key\nconst OPTIONS_TYPE_KEY = '_kill_global_type_'; // options中的标示，用来获取key\nconst NUL_VALUE = '_kill_global_data_pool_key_null'; //options表示空的标示\nconst DataPool = {}; // 数据池\nfunction GetUniqueCode() { // 获取唯的编码\n    return `_data_pool_key_${parseInt(Math.random()*1000000)}`;\n}\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.DeepCopy = function DeepCopy(data) { // *对象深拷贝\n    if (!data) return '';\n    if (typeof data != 'object') return data;\n    if (Object.keys(data).length == 0) return data;\n    let _data = JSON.stringify(data);\n    return JSON.parse(_data);\n};\n\nfunction SetDataPool(data, key) { // 将数据放入数据池\n    if (!data) return NUL_VALUE;\n    let _key = key || GetUniqueCode();\n    DataPool[_key] = data;\n    const _options = {};\n    _options[OPTIONS_KEY] = _key;\n    return _options;\n}\n\nfunction TranslateData(options_key, page = '', type) { // 传输数据的对象\n    this.type = type;\n    this.targetPage = page;\n    this.translateCode = options_key || NUL_VALUE;\n    // *@param data: 数据\n    // *@param tag: 标识 可选,一个page的onKGData可能会被很多page调用，这个tag用来标示数据来源\n    this.withKGData = function(data, tag = '') { // 存储数据/传数据\n        const _data = DeepCopy(data) // 拷贝data，防止互相干扰\n        if (this.targetPage && this.targetPage.onKGData) {\n            // 如果知道page，直接将数据传过去\n            this.targetPage.onKGData(_data, tag || this.type);\n            return;\n        }\n        _data[DATA_TAG] = tag;\n        SetDataPool(_data, this.translateCode);\n    }\n}\n\nconst InsertKeyToParams = function(params, type) { // 向params中插入参数\n    let _params = {};\n    if (params && Object.keys(params).length > 0) {\n        _params = Object.assign(_params, params);\n    }\n    _params[OPTIONS_KEY] = GetUniqueCode();\n    _params[OPTIONS_TYPE_KEY] = type;\n    return _params;\n}\n\nconst KGRouter = {\n    navigateTo(url, params) { // 进入下一个页面  url：地址, params：参数\n        const _params = InsertKeyToParams(params, TYPE_NAVIGATETO);\n        wx.navigateTo({ url: `${url}${EncodeParams(_params, url)}` });\n        return new TranslateData(_params[OPTIONS_KEY]);\n    },\n    redirectTo(url, params) { // 重定向  url：地址, params：参数\n        const _params = InsertKeyToParams(params, TYPE_REDIRECT);\n        wx.redirectTo({ url: `${url}${EncodeParams(_params, url)}` });\n        return new TranslateData(_params[OPTIONS_KEY]);\n    },\n    reLaunch(url, params) { // 重启到某个页面 url：地址, params：参数\n        const _params = InsertKeyToParams(params, TYPE_RELAUNCH);\n        wx.reLaunch({ url: `${url}${EncodeParams(_params, url)}` });\n        return new TranslateData(_params[OPTIONS_KEY]);\n    },\n    navigateBack(delta = 1) { // 返回某个页面\n        const _pages = getCurrentPages();\n        let _ind = _pages.length - delta - 1;\n        _ind = _ind > -1 ? _ind : 0;\n        _ind = _ind > _pages.length - 1 ? _pages.length - 1 : _ind;\n        const _page = _pages[_ind]; // 目地页面\n        const _key = _page[OPTIONS_KEY]; // 目地页面的key\n        wx.navigateBack({ delta });\n        return new TranslateData(_key, _page, TYPE_BACK);\n    },\n    getDataFromPool(key) { // 获取数据\n        if (!key || key === NUL_VALUE) return '';\n        const _data = DataPool[key];\n        delete DataPool[key]; // 从数据池删除数据\n        return _data;\n    },\n    get optionsKey() {\n        return OPTIONS_KEY;\n    },\n    get optionsTypeKey() {\n        return OPTIONS_TYPE_KEY;\n    },\n    get optionsNull() {\n        return NUL_VALUE;\n    },\n    get dataTag() {\n        return DATA_TAG;\n    },\n    get getUniqueCode() {\n        return GetUniqueCode;\n    },\n    get encodeUrlParams() { // 将参数编码为字符串\n        return EncodeParams\n    },\n    get push() { // navigateTo别名1\n        return this.navigateTo;\n    },\n    get goto() { // navigateTo别名2\n        return this.navigateTo;\n    },\n    get redirect() { // 重定向 别名\n        return this.redirectTo;\n    },\n    get back() { // 返回 别名\n        return this.navigateBack;\n    },\n};\n\n// 添加back的快捷函数\n// back1,back2,back3......,back8,back9,back10\n// 依次返回1页,2页,3页......,8页,9页,10页\nfor (let delta = 1; delta <= 10; delta++) {\n    const _fnName = `back${delta}`;\n    KGRouter[_fnName] = function() {\n        return KGRouter.back(delta);\n    }\n}\n\nif (!exports.__esModule) Object.defineProperty(exports, \"__esModule\", { value: true });exports.default = KGRouter;\n"]}